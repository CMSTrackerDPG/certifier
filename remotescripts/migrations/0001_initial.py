# Generated by Django 4.0.4 on 2022-05-28 11:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import remotescripts.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ScriptArgumentBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=20, null=True)),
                ('type', models.CharField(choices=[('INT', 'Integer'), ('STR', 'String')], default='STR', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='ScriptConfigurationBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Script title to display', max_length=50, null=True)),
                ('base_command', models.TextField(help_text='Base command to run', max_length=500, validators=[remotescripts.validators.validate_bash_script])),
                ('show_stdout', models.BooleanField(default=True, help_text='Show stdout')),
                ('show_stderr', models.BooleanField(default=False, help_text='Show stderr')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='BashScriptConfiguration',
            fields=[
                ('scriptconfigurationbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='remotescripts.scriptconfigurationbase')),
            ],
            bases=('remotescripts.scriptconfigurationbase',),
        ),
        migrations.CreateModel(
            name='RemoteScriptConfiguration',
            fields=[
                ('scriptconfigurationbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='remotescripts.scriptconfigurationbase')),
                ('host', models.CharField(help_text='Remote host to run the command on', max_length=50)),
                ('port', models.PositiveIntegerField(default=22, help_text='Remote host port to connect to', null=True, validators=[django.core.validators.MaxValueValidator(limit_value=65535)])),
                ('connection_protocol', models.CharField(choices=[('ssh_kb', 'SSH - keyboard interactive')], default='ssh_kb', help_text='Connection protocol to use', max_length=10)),
                ('env_secret_username', models.CharField(help_text='Environment variable name where username is stored', max_length=20, null=True)),
                ('env_secret_password', models.CharField(help_text='Environment variable name where password is stored', max_length=20, null=True)),
            ],
            bases=('remotescripts.scriptconfigurationbase',),
        ),
        migrations.CreateModel(
            name='ScriptOutputFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directory', models.CharField(default='~', help_text='Directory where the output file is to be found', max_length=255)),
                ('filename_regex', models.CharField(default='(?P<filename>.+)?\\.txt', help_text='Regex to use in directory to find the file', max_length=100)),
                ('mother_script', models.ForeignKey(help_text='Script instance this file is generated from', on_delete=django.db.models.deletion.CASCADE, related_name='output_files', to='remotescripts.remotescriptconfiguration')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptKeywordArgument',
            fields=[
                ('scriptargumentbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='remotescripts.scriptargumentbase')),
                ('keyword', models.CharField(default='keyword', help_text='Keyword name for this argument', max_length=50)),
                ('separator', models.CharField(choices=[(' ', 'Space'), ('=', '=')], default=' ', help_text='Separator between they keyword name and the argument', max_length=2)),
                ('mother_script', models.ForeignKey(help_text='Script instance this argument applies to', on_delete=django.db.models.deletion.CASCADE, related_name='keyword_arguments', to='remotescripts.scriptconfigurationbase')),
            ],
            bases=('remotescripts.scriptargumentbase',),
        ),
        migrations.CreateModel(
            name='ScriptPositionalArgument',
            fields=[
                ('scriptargumentbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='remotescripts.scriptargumentbase')),
                ('position', models.PositiveSmallIntegerField(help_text='Position to be placed after command.', validators=[django.core.validators.MinValueValidator(limit_value=1)])),
                ('mother_script', models.ForeignKey(help_text='Script instance this argument applies to', on_delete=django.db.models.deletion.CASCADE, related_name='positional_arguments', to='remotescripts.scriptconfigurationbase')),
            ],
            options={
                'unique_together': {('position', 'mother_script')},
            },
            bases=('remotescripts.scriptargumentbase',),
        ),
    ]
